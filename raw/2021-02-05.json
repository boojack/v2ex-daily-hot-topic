[{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1611468499","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1611468499","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":13906,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1611468499","stars":1705,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"username":"nutting","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/6b8a/1cb4/180793_mini.png?m=1490326738","bio":null,"url":"https://www.v2ex.com/u/nutting","tagline":null,"twitter":null,"created":1467882233,"avatar_large":"https://cdn.v2ex.com/avatar/6b8a/1cb4/180793_mini.png?m=1490326738","avatar_mini":"https://cdn.v2ex.com/avatar/6b8a/1cb4/180793_mini.png?m=1490326738","location":null,"btc":null,"id":180793},"last_reply_by":"Conty","last_touched":1612493128,"title":"妙控板和妙控鼠的区别？","url":"https://www.v2ex.com/t/751444","created":1612485116,"content":"准备外接显示器了，自然需要搞定鼠标，键盘。那个妙控板比鼠标贵 1 倍了，好在哪里，有啥特点。那么鼠标又体验如何？都用过的大佬分享一下？","content_rendered":"<p>准备外接显示器了，自然需要搞定鼠标，键盘。那个妙控板比鼠标贵 1 倍了，好在哪里，有啥特点。那么鼠标又体验如何？都用过的大佬分享一下？</p>\n","last_modified":1612485116,"replies":40,"id":751444},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/3c59/dc04/21_large.png?m=1598508742","name":"shenzhen","avatar_normal":"https://cdn.v2ex.com/navatar/3c59/dc04/21_normal.png?m=1598508742","title":"深圳","url":"https://www.v2ex.com/go/shenzhen","topics":2029,"footer":"","header":"","title_alternative":"Shenzhen","avatar_mini":"https://cdn.v2ex.com/navatar/3c59/dc04/21_mini.png?m=1598508742","stars":1458,"aliases":[],"root":false,"id":21,"parent_node_name":"cn"},"member":{"username":"windplume","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/2b7f/0f69/334224_mini.png?m=1551685109","bio":null,"url":"https://www.v2ex.com/u/windplume","tagline":null,"twitter":null,"created":1532351580,"avatar_large":"https://cdn.v2ex.com/avatar/2b7f/0f69/334224_mini.png?m=1551685109","avatar_mini":"https://cdn.v2ex.com/avatar/2b7f/0f69/334224_mini.png?m=1551685109","location":null,"btc":null,"id":334224},"last_reply_by":"kangkang","last_touched":1612492976,"title":"昨晚开门钻突然进来一只小橘猫，求领养，坐标深圳！","url":"https://www.v2ex.com/t/751440","created":1612483619,"content":"昨晚钻进来一只小橘猫，相当铲屎官可惜我这没条件，哪位好心人看上了就领养了吧，谢谢！\n\n\n\n联想方式：d2luZC1wbHVtZQ==\n\n\n\nhttps://www.douban.com/doubanapp/dispatch?uri=/photo/2632253237/\n\nhttps://www.douban.com/doubanapp/dispatch?uri=/photo/2632253239/","content_rendered":"<p>昨晚钻进来一只小橘猫，相当铲屎官可惜我这没条件，哪位好心人看上了就领养了吧，谢谢！</p>\n<p>联想方式：d2luZC1wbHVtZQ==</p>\n<p><a href=\"https://www.douban.com/doubanapp/dispatch?uri=/photo/2632253237/\" rel=\"nofollow\">https://www.douban.com/doubanapp/dispatch?uri=/photo/2632253237/</a></p>\n<p><a href=\"https://www.douban.com/doubanapp/dispatch?uri=/photo/2632253239/\" rel=\"nofollow\">https://www.douban.com/doubanapp/dispatch?uri=/photo/2632253239/</a></p>\n","last_modified":1612483619,"replies":31,"id":751440},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/4e73/2ced/26_large.png?m=1584288945","name":"hangzhou","avatar_normal":"https://cdn.v2ex.com/navatar/4e73/2ced/26_normal.png?m=1584288945","title":"杭州","url":"https://www.v2ex.com/go/hangzhou","topics":1512,"footer":"","header":"","title_alternative":"Hangzhou","avatar_mini":"https://cdn.v2ex.com/navatar/4e73/2ced/26_mini.png?m=1584288945","stars":1297,"aliases":[],"root":false,"id":26,"parent_node_name":"cn"},"member":{"username":"mantreegcj","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/11b45b5c5ed44118b082452ab129526d?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/mantreegcj","tagline":null,"twitter":null,"created":1560330663,"avatar_large":"https://cdn.v2ex.com/gravatar/11b45b5c5ed44118b082452ab129526d?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/11b45b5c5ed44118b082452ab129526d?s=24&d=retro","location":null,"btc":null,"id":421086},"last_reply_by":"lsdvincent","last_touched":1612493604,"title":"为什么杭州城西附近还不禁燃烟花爆竹","url":"https://www.v2ex.com/t/751451","created":1612488017,"content":"早上做公交，看到公交车上的移动电视播放着杭州禁止售卖燃放烟花爆竹的会议记录。\r\n然后想到前段时间还有包括昨天晚上听到的劈里啪啦的烟花爆竹声音（坐标丰潭路地铁站附近，旁边就是派出所），就有点想笑。\r\n老家三四线小城市的农村都禁燃好几年了。\r\nV 友怎么看的。😂","content_rendered":"<p>早上做公交，看到公交车上的移动电视播放着杭州禁止售卖燃放烟花爆竹的会议记录。\n然后想到前段时间还有包括昨天晚上听到的劈里啪啦的烟花爆竹声音（坐标丰潭路地铁站附近，旁边就是派出所），就有点想笑。\n老家三四线小城市的农村都禁燃好几年了。\nV 友怎么看的。😂</p>\n","last_modified":1612488017,"replies":29,"id":751451},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":168272,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680","stars":3156,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"cairnechen","website":"","github":"","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/0d41/e2cf/93574_mini.png?m=1438756803","bio":"多少人擦肩而过，有几个知道姓名？我与你本无相干，凭什么会动真情？","url":"https://www.v2ex.com/u/cairnechen","tagline":"式微，式微，胡不归","twitter":"","created":1422103621,"avatar_large":"https://cdn.v2ex.com/avatar/0d41/e2cf/93574_mini.png?m=1438756803","avatar_mini":"https://cdn.v2ex.com/avatar/0d41/e2cf/93574_mini.png?m=1438756803","location":"","btc":"","id":93574},"last_reply_by":"sleeepyy","last_touched":1612493589,"title":"为啥到了 Clubhouse，不给通讯录权限就不能邀请好友，就变得可以接受了呢？","url":"https://www.v2ex.com/t/751456","created":1612488959,"content":"以及，莫名觉得这个最近很🔥的产品打法套路越来越像国内公司\r\nhttps://i.v2ex.co/YMb4bkZKl.png","content_rendered":"以及，莫名觉得这个最近很🔥的产品打法套路越来越像国内公司<br /><a target=\"_blank\" href=\"/i/YMb4bkZKl.png\" rel=\"nofollow noopener\" target=\"_blank\" title=\"在新窗口打开图片 YMb4bkZKl.png\"><img src=\"//i.v2ex.co/YMb4bkZKl.png\" class=\"embedded_image\"></a>","last_modified":1612488959,"replies":22,"id":751456},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1612151314","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1612151314","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":43083,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1612151314","stars":7233,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"username":"muchan92","website":"","github":"muchan92","psn":"","avatar_normal":"https://cdn.v2ex.com/gravatar/d96139585f9a0f3b21c57da6fd6ca55f?s=24&d=retro","bio":"雨林人","url":"https://www.v2ex.com/u/muchan92","tagline":"","twitter":"","created":1609322026,"avatar_large":"https://cdn.v2ex.com/gravatar/d96139585f9a0f3b21c57da6fd6ca55f?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/d96139585f9a0f3b21c57da6fd6ca55f?s=24&d=retro","location":"","btc":"","id":526237},"last_reply_by":"muchan92","last_touched":1612493204,"title":"写代码如盗墓笔记，如何逃出生天？","url":"https://www.v2ex.com/t/751452","created":1612488066,"content":"为什么说写代码如盗墓笔记呢，是因为写代码确实有一些特点和盗墓笔记很像，比如坑比较多，也都处于暗处，没有在明面上，在进入之前是无法知晓整个结构的，只有亲身深入其中，详细探索完每一个地方之后才能知晓。\r\n\r\n但是这个探索过程是非常艰难的，因为一切都是未知的，也没有任何导航可用，只能两眼抹黑的往前瞎拱，自然免不了各种迷路，各种碰壁，各种掉坑。\r\n\r\n这种艰难的状况经历了多了之后，我们就应该思考了，是什么原因导致了这种状况？那么又有没有方法可以解决这种状况吗？\r\n\r\n## 分析代码的特点\r\n\r\n我们重新审视分析下程序代码的特点，只有了解了这些特点，才能探究出原因。  \r\n程序代码主要是由数据变量和逻辑控制流构成的，其中逻辑控制流占据了绝大部分。而逻辑控制流包含了许多分支，就像本来是一条道路，却分叉出了许多支路，选择一条支路，走着走着又继续分叉出更多的支路出来，密密麻麻，乱乱糟糟的，这就导致了这些道路非常难走。并且更令人抓狂的是，这些道路没有导航，没有地图，没有路标，非得抹黑走到路的尽头才能知道尽头到底是什么。  \r\n数据变量基本上有两个职能，一个是用来标记逻辑控制流的运行状态；另一个就是用来组成数据结构。而实际上离散的数据变量也算是数据结构的一种，只是不同于经典数据结构，不太明显而已，容易让人误认为其仅是一个离散的变量，而忽略其影响并左右逻辑控制流的结构性的意义。  \r\n\r\n所以整体看来就是，**数据变量和逻辑控制流是互相关联互相影响的。**  \r\n\r\n而从分析过程中也可以知道，程序代码的特点就是分支散碎，藏于尽头，难以获知。导致这一特点的原因也是逻辑控制流的复杂性、散碎、藏于尽头。也即，程序代码的这些不好的特点都是由逻辑控制流体现的。\r\n\r\n那么逻辑控制流能避免这些缺点吗？答案是不能。因为这是由于逻辑控制流的根本复杂性和本质复杂性所决定的。逻辑控制流说白了就是平常说的过程，所以也是无法跳过的，因为你不能跳过过程而直接获得结果。  \r\n所以从这里看来，程序代码的这些缺点也依然存在，无法避免。\r\n\r\n## 什么是数据流向？\r\n\r\n不过有一点非常值得思考，逻辑控制流的目的是什么？**是进行数据转换，也就是进行数据结构的转换，也就是描述并控制数据的流向。**  \r\n这也是程序的本质：**从输入数据结构，来获取输出数据结构。**  \r\n所以，写逻辑控制流的意义不是纯粹为了写逻辑控制流，而是为了进行数据结构的转换，描述并控制数据的流向。因此，我们可以获得一个非常重要的有用信息，**只要能够理清数据的流向，就能显著降低阅读代码的难度。**\r\n我们阅读代码的目的其实也就是为了弄清楚数据的流向。\r\n\r\n那么我们就把重心转移到理清数据的流向上来，分析下如何才能更好的理清数据的流向。  \r\n因为逻辑控制流的本质复杂性，所以我们无法通过逻辑控制流来清晰的理清数据的流向，这也正是我们一直以来读写代码所采用的方式，事实证明，这不是好的方式，数据流向散落在逻辑控制流的各个地方，根本没有好的办法可以串联起来，形成一个有导航意义的地图。  \r\n\r\n前文说过，程序代码是由数据变量和逻辑控制流构成的，也提到过，数据变量和逻辑控制流是互相关联互相影响的，并且数据流向自然也离不开数据变量。既然没有好的办法通过逻辑控制流来理清数据流向，那么就需要思考下在数据变量上是否有好的办法。\r\n\r\n数据变量是什么？前文解释过，数据变量就是数据结构。  \r\n请着重注意 **结构** 这个概念，结构表示了层级和关联，而**关联就是流向**，我们正是想理清流向。所以在数据结构身上，我们看到了理清数据流向的希望。\r\n\r\n在开始分析如何通过数据结构来理清数据流向之前，我觉得有必要，也非常有必要重新强化对结构的认知。因为有太多的小伙伴们对结构没有足够的重视，不以为然，莫不关心，没有认知到结构的重要性以及不可或缺性以及根本本质性。\r\n\r\n## 结构是“神”的语言\r\n\r\n我们眼前的一切，周围的一切，手机、电脑、衣食住行、山川大海、以及你我，都是由结构构成的，更确切的讲，这一切就是结构。我们第一次认知这个世界就是从结构开始，第一次睁眼看到父母，第一次拆解玩具，第一次感受花草。人类学习结构，利用结构，组成各种各样的新的结构、新的工具来帮助我们生活。人类研究周围的各种物体，以及日月星辰、宇宙天体，其实就是在探索它们的结构，和结构之间的关联。只有知晓了它们的结构与之间的关联，我们才能组装更高级的结构来生产工具，才能进一步知晓周围万物的原理和世界的运行规律。  \r\n\r\n我们都知道我们身处的宏观世界是三维的立体世界，这个世界中的任何物体都有其形状，有其结构，形状就是结构，没有结构将无法存在于这个世界中。即使加入看不见摸不着的时间维度组成四维的时空世界，结构依然存在于任何一个维度之中。我们都知道万有引力，其中引力并不是虚无飘渺的能量，而是质量在时空中引起的时空扭曲，正是因为时空可以被扭曲，所以任何一个维度都是有结构的，人类一直在探索其中的结构和关联。  \r\n\r\n在微观世界中，物质是由分子构成的，人类对分子的结构进行探索发现了原子，对原子的结构进行探索发现了原子核，继续不断对结构进行探索发现了夸克。反过来讲就是，各种更小的粒子结构通过 **关联** 组合成较大的粒子结构，层层组合最终构成了宏观世界。化学的本质是物理的粒子运动，粒子运动其实是结构之间的关联，人类的情感、想法等都是细胞间的化学信号，而化学信号又是物理的粒子运动，本质又是结构之间的关联，所以我们人类的一切行为，生物的一切行为都是结构之间的关联。  \r\n\r\n所以，结构是“神”的语言，用结构和结构之间的关联来描述整个世界。\r\n\r\n## 分析如何理清数据流向\r\n\r\n数据结构之于程序代码也同样如此，其是程序的根本，数据结构与之间的关联描述了整个程序世界，逻辑控制流依存于数据结构，若离开其，则程序将崩塌不复存在。\r\n\r\n现在我们开始分析如何通过数据结构来理清数据流向。  \r\n由前文可知，数据的流向是由逻辑控制流来控制的，但是逻辑控制流本身就是复杂的，现在我们换个说法，数据的流向是由逻辑控制流来**驱动**的，逻辑控制流只是通过一些条件、规则来驱动数据进行流动，其流向并不是在写逻辑控制流的过程中而突然打通的，而是在写逻辑控制流之前，在数据结构定义的时候，就已经开始设计构思其流向了。只是几乎我们每一个程序员都忽略了这一点，我们错误的以为数据流向是存在于逻辑控制流之中的。\r\n\r\n### 这种误解是如何产生的？\r\n\r\n首先，程序的原作者在定义数据变量也即数据结构的时候，就已经在脑中设计构思其流向了，但他并没有在该数据结构上做说明来描述数据的流向。然后，他认为数据的流向应该用逻辑控制流来描述就可以，就够用了，所以就零零散散的用代码在逻辑控制流中进行描述。这就导致了别人不得不完整阅读逻辑控制流中的散碎的、反人类的代码来弄清楚数据的流向，原作者留给后来人的仅有这一堆蜿蜒曲折，支离破碎的代码，而清晰的导航地图只留在了原作者的脑海中，别人无法获取。只有神和原作者知道。时间久一点后，就只有神知道了。\r\n\r\n### 强化数据结构的表达\r\n\r\n阅读到此，我们已经非常确定数据的流向是隐含于数据结构之上的，只是数据结构太沉默，缺乏表达。而逻辑控制流又太活跃，喧宾夺主。\r\n\r\n所以，我们要强化数据结构的表达，在数据结构上描述数据的流向，也就是结构之间的关联。  \r\n\r\n事实上，当我们把几个独立的数据结构，编排组织在一起成为一个较大的新的结构时，这种关联就已经建立了，只是我们并未对其进行更多的、更详细的描述，关联隐晦其中。我们只是把它当作了数据的存储，然后通过逻辑控制流再对其进行读读写写。\r\n\r\n## 寻找解决方案\r\n\r\n有两种方案可以更好的描述结构之间的关联。\r\n\r\n### 注释型方案\r\n\r\n一种是注释型方案，在数据结构上通过注解来解释并描述结构之间数据的流动，可以描述流动的方向性，然后通过预处理，静态编译来校验结构之间关联的正确性。我们需要实现一个静态的编译检查工具。  \r\n\r\n依然还是在逻辑控制流中对数据的流向进行控制，只是额外增加了在数据结构定义时的说明，弊端是程序员可以偷懒不进行注解，这样就又退化回了原始的蛮荒。更主要的弊端是，还是采取了以逻辑控制流为主的编码方式，也就保留了前文说过的逻辑控制流的所有缺点，虽然通过注解有了数据流向的地图，但是辅助作用有限，阅读并梳理代码还是有较大难度，治标不治本。\r\n\r\n### 数据结构化编程\r\n\r\n另一种方案是，**以数据结构为主，以逻辑控制流为辅，也就是面向数据结构编程（数据结构化编程），而非面向过程。**  \r\n\r\n注意，这不是为了提出新概念，也不是为了喊口号，而是为了改变以往的过程式思维方式，转到结构化思维方式上来。**意识形态决定思维方式，思维方式决定实际行为。**\r\n\r\n这就是为何一直要强调结构的重要性来建立意识形态，从而塑造结构化思维，从而决定实际的代码编写。这个初始的思维转变可能不太习惯，请耐心些，因为我们已经越过了逻辑控制流的层层迷雾，开始直接面对程序的核心“数据结构”，握住了程序的命脉。\r\n\r\n## 结构化思维 & 结构的规则\r\n\r\n### 改变根深蒂固的看法\r\n\r\n**在结构化思维方式中，我们首先要改变把数据结构仅仅当作数据存储这一根深蒂固的看法。**\r\n\r\n或许你会认为这违背了以往的准则，离经叛道，数据结构就应该也仅应该当作逻辑控制的存储区域，这样才有简单性。貌似没错，但实际上整个程序代码变简单了吗？用事实说话就是并没有！唯一保持“简单”的只有数据结构，能不简单吗，就是声明定义了一个变量而已，当然简单了。但为此付出的代价是无比高昂的，仅为了保持变量声明的简单性，而不得不在逻辑控制流中来控制其流向，操纵其行为，通过各种令人绝望的骚操作来让其运动起来，引发绝望的复杂性。  \r\n\r\n这就好比，太阳和地球纯粹就是简单的球体而已，是固定静止的，没有地球绕着太阳旋转，而如果要让地球绕着太阳旋转的话，则只能由上帝额外施加一个 **神力** 来让地球绕着太阳旋转。如果我们的宇宙真是这样的话，我们永远无法弄清楚宇宙天体的运行规律，绝不可能！这直接丢弃了万有引力，而是通过神力来模拟引力的效果，而神力却是我们永远无法触及的，除非我们是神。更恐怖的是，一旦引入这个神力，就会破坏原来世界的平衡（蝴蝶效应），而为了维持平衡，则会引入更多的神力，从而陷入无尽的循环。一个充满神力的世界，是极致复杂的，永远不可能弄清楚。  \r\n\r\n而我们却习惯于在程序代码中充当神的角色，用各种神力来实现目的，并艰难的维护着平衡，以至于自己也难以看懂。摘去神力的面具，这其实是幽灵之力，魔鬼之力，地狱之力，想当神的我们，却实际成为了撒旦。\r\n\r\n改变了看法之后，数据结构就不应该是一个静静的数据存储了，**数据结构本身一定是有自己的规则。**\r\n就像太阳和地球一样，其自身就具有引力的规则，可以自我解释清楚，而不是借助外部的神力。宇宙的规则“物理”的简单之处也就是所有的规则一定是存在于其物质本身的，通过对物质本身的结构和规则进行探索，就能掌握万物的奥秘。\r\n\r\n### 改变主观视角\r\n\r\n所以我们要在数据结构上定义规则，用其本身的规则来描述结构之间的关联。  \r\n\r\n**在结构化思维方式中，我们思考的角度应该立足于数据结构上。**\r\n这就产生一个非常有意思的思考流程：\r\n1. 首先告诫自己，这是一个从输入数据转化为输出数据的运动规则，一定抽象出两类字段，即输入字段和输出字段。\r\n2. 分析需求，找出提供的物料和期望的结果，在结构上定义一个或多个输入字段，和一个或多个输出字段。\r\n3. 因为要定义规则，规则的最大特点就是可以被动的自动执行（物理规则也是如此；其不同于函数，函数是主动执行的），所以要找到执行的时机。\r\n4. 考虑到函数执行的时机是当所有入参都传入时，所以很自然的，规则的执行时机，应该是规则所依赖的输入字段都准备好时。\r\n5. 这里获知一个很有趣的性质，就是规则的执行是不依赖入参的顺序的，也即无需操心字段的赋值顺序，程序员只需要负责把字段塞满就好，如果有规则该执行，那么就会自动执行。\r\n6. 由此，定义规则就变得简单了，主要分为三部分：\r\n\t* 所需要的条件（输入数据），即声明需要哪些输入字段\r\n\t* 规则细节（数据转化的过程），即实现数据转化的过程\r\n\t* 产生**预期**输出结果（输出数据），即标明会有哪些输出字段（暂时简化，写此文时，在评估确定较好的通用标明方案）\r\n7. 发现结构化的一个重要性质，即数据流向是清晰的，易于梳理的，这对可维护性很重要。（**达到理清数据流向的目标**）\r\n8. 发现结构化的另一个重要性质，即数据结构的复用性很高，因为每个结构都是**自洽**的。\r\n9. 对于复杂的需求，可以构建树形数据结构，由子结构的输出结果作为父结构所需要的条件，执行规则，产生属于父结构的输出结果。最终通过这种简单的方式，在最外层生成最终的**预期**输出结果，交付给用户。\r\n10. 最终，重新认知到，程序是由简单易懂的数据结构遵循规则运行后，产生**预期**输出结果（输出字段），而不应该是进入黑盒函数后经过玄学操作返回结果。这是因为，前者的结果是可以预期的，规则是恒定的，可以扁平展开的；而后者的结果是难以预期的，也难以进入梳理运行流程，复杂令人绝望。\r\n\r\n### 结构化的基本性质和特性\r\n\r\n可以发现结构化的三大基本性质：**易于读写、流向清晰、高度复用**。  \r\n和高级特性：**安全、并发**。字段会对数据进行完备校验（不仅校验类型，也校验数据值是否符合预期规则），每个字段都是安全的，那么整个程序就会是安全的。由于字段赋值是不要求顺序的，因而可以有更好的并发性。\r\n\r\n### 定义结构 & 定义规则\r\n\r\n实际编程需要做的只有 2 、6 两步，这也正是结构化思维后数据结构的两个根本构成：**字段和规则**。在以往只有字段的情况下，新添加了规则这一个概念，整个程序世界变得完全不同了，开始变得清晰明朗了，一直萦绕的迷雾消失不见了，如透明般展示于我们的眼前。就像有了货币规则之后，人类的整个文明世界都变得不同了，社会飞速进步。\r\n\r\n显而易见的，在走完整个思考流程后，最终我们对程序有了简单易懂的全新认知，获益是巨大的。整个程序如树形结构一般清晰的展示于我们眼前，对于我们阅读来讲，基本上只需要关心字段的输入和输出，而不必探究详细的实现，因为字段是如此的清晰易读。每一个子结构都可以使用同样的方式，扁平展开，阅读复杂度是恒定平缓的，而这在过程式编程中是无法想象的，是不可能的，其复杂度如蜗牛一般是螺旋状的，总能把人搞晕，代码量越多，复杂度就越恐怖。而现在我们终于找到了结构化编程，将复杂度变得平缓，有一种打破枷锁的解放感。\r\n\r\n耳听为虚，眼见为实，接下来通过一个示例来体会下结构化编程的简单易懂。（此为演示代码，**现在已经有 TypeScript 版可用: <https://rainforesters.github.io/rainforest-js>** ）\r\n\r\n```go\r\n// 定义结构\r\n\r\n// 定义跳跃的信号结构\r\ntypedef JumpSignal {\r\n  jump bool\r\n  event Event\r\n  stage Stage\r\n}\r\n\r\n// 定义规则函数\r\n\r\n// 这个规则应该解读为：将用户的操作转化为跳跃信号\r\nfuncdef JumpSignal (\r\n  // 声明待观察的字段（可以有多个）\r\n  // 一旦所有字段都准备好（被赋值），则触发规则函数\r\n  event\r\n) => {\r\n  if (self.event.type == \"tap\") {\r\n    self.jump = true // 为 jump 字段赋值，表示 jump 字段已经准备好\r\n  }\r\n}\r\n\r\nfuncdef JumpSignal (\r\n  stage\r\n) => {\r\n  self.stage.addEventListener(\"tap\", (e) => {\r\n    self.event = e\r\n  })\r\n}\r\n\r\n\r\ntypedef Avatar {\r\n  ...\r\n}\r\n\r\ntypedef Player {\r\n  avatar Avatar\r\n  jumpSignal JumpSignal\r\n}\r\n\r\n// 这个规则应该解读为：当跳跃信号发生时，将角色变成跳跃状态\r\nfuncdef Player (\r\n  jumpSignal {\r\n    // 可以直接观察子结构的字段，而无需关心 jumpSignal 是否为空，\r\n    // 因为，遵循结构化编程的思维，这里只需要声明待观察的目标字段，\r\n    // 也就是，我们只期望 jump 准备好，\r\n    // 这也就间接表明了 jumpSignal 肯定会准备好。\r\n    // 这种简单直白的条件声明，是以往过程式编程所无法实现的。\r\n    jump\r\n  }\r\n) => {\r\n  if (self.jumpSignal.jump) {\r\n    self.avatar.state = \"jump\"\r\n  }\r\n}\r\n\r\n\r\nfunc main() {\r\n  // 初始化结构实例\r\n  // avatar jumpSignal 会自动初始化\r\n  const player = typeinit(Player)\r\n  player.jumpSignal.stage = stage // 将舞台赋值给跳跃信号\r\n}\r\n```\r\n\r\n**核心是以数据结构为主，在其上定义规则，充分利用规则的被动自动执行。**  \r\n整个程序的结构现在是完全可视的了，子结构都层次分明，职责明确，可以快速的弄懂结构的意图，梳理整个程序的架构，理清数据的流向。我们能避免像以往过程式编程那样掉入逻辑漩涡，无法自拔，可以松快的读写代码。\r\n\r\n### 结构化编程的新写法\r\n\r\n以往的过程式编程的写法是，需要通过逻辑控制流，一步一步小心翼翼的线性编写，同时还要考虑最令人烦恼的分支判断等，需要费很大的力气来编写。  \r\n\r\n现在，编程方式开始有变化了，通过结构化编程，我们获得了三个恒定的写法：\r\n* **定义数据结构**\r\n* **定义规则**\r\n* **为字段赋值（让数据准备好）**\r\n\r\n得益于结构的高复用性，所以，最常用的写法就是为字段赋值，这个活很好干。不用引入逻辑控制流，不用操心赋值顺序，只要需要被赋值，那就赋值好了，只要需要准备的都准备好了，系统会聪明的遵循规则自动运行。这就像是在设置配置文件，简单直白，通俗易懂。\r\n\r\n## 一定要有新认知、新思维\r\n\r\n可能依然有些同学会觉得上述示例晦涩难懂，发现不了结构化编程的好处，说白了就是一时还没有转过弯来，依然用过程式的思维来阅读上述代码，旧思维太固执，太根深蒂固。  \r\n\r\n正如前面花大力气强调的，**一定要认知到结构的重要性，一定要改变数据结构是数据存储的固执看法，一定要秉承结构化的思维，以数据结构为主，着眼于结构本身去理解规则。**\r\n意识形态决定思维方式，思维方式决定实际的阅读和编写行为。  \r\n\r\n总之，要扭转过程式思维到结构化思维上来，想通了，就明朗了。\r\n\r\n## 结构化编程的好处\r\n\r\n使用结构化编程，我们能获得一些前所未有的令人欣喜的好处，如我们可以直接从结构化的三大基本性质（易于读写、流向清晰、高度复用）中获益，也可以从更高级的安全和并发特性中获益。还有就是得益于结构化编程的新写法，我们可以实现更多工具在静态检查阶段或运行阶段，通过可视化的方案来一览整个程序的数据流向，可以知道哪些字段是输入数据；哪些字段是输出数据；哪些字段是被依赖的，又间接依赖哪些字段；哪些字段已经准备好；哪些字段尚未准备好，等等等等。\r\n这在以往的过程式编程中是难以实现的。\r\n\r\n还有一个不得不说的性质：**高度复用**。  \r\n同样得益于结构化编程的新写法，我们统一了结构引用定义的方式，和为字段赋值的方式。  \r\n这就表示，你自己定义的或者他人定义的结构，都能够复用、通用。这也表示了，如果大家开放自己定义的结构给所有人使用，那么随着积累、沉淀，我们写的代码将会越来越少。  \r\n以往，我们受限于组件的不可检索性，只能通过一个项目的文字简介来获知是否对自己适用，而现在得益于结构的完整自描述性（自洽），可以归纳出输入字段的类型和输出字段的类型，构建索引，从而可以提供终端的用户检索。  \r\n同时，由于数据结构代表数据本身，可以方便进行序列化，这就表示，可以抹平不同编程语言之间的差异，可以方便的跨语言执行规则，也易于分布式执行规则。\r\n\r\n另一个不得不说的特性：**安全**。  \r\n毫不客气的讲，绝大多数程序员最容易忽视的就是安全，除了讨厌写注释之外，就是讨厌写安全校验，不喜欢穿衣服就出门。还有一个长久困扰程序员的麻烦是 Debug，除去明显的逻辑错误，大多数 Debug 的过程其实是把异常数据校正的过程，但是追踪问题根源却要耗费九牛二虎之力。  \r\n现在，受益于结构的自洽，我们也可以让类型自洽，对类型进行自我描述，不但要校验输入数据的类型，同时也校验数据的值是否合规，是否符合预期。也即类型是可以有明确语义的，可信的，可以预期的，是安全的。  \r\n比如期望是偶数，那么就定义一个偶数类型，然后作为数据结构的字段类型，那么对任何偶数类型字段的赋值都会自动进行校验，校验的目的就是要确保符合预期，保持确定性。  \r\n每个字段都是符合预期的，那么整个结构就是符合预期的，从而整个程序也是符合预期的，是安全的。整个程序的状态在任何时刻都是确定的，任何时刻都是安全的。\r\n\r\n清晰的数据流向也提高了 **可维护性**。  \r\n现在，整个程序的流向地图不是隐藏于原作者的脑海了，在编写程序的时候就已经开始绘制出来了，这对于后续的维护者来说是天大的福音。  \r\n同时，得益于上面所说的安全，让结构保持在确定的、可以预期的状态，这也能减少 Bug 的产生，降低 Debug 的难度。\r\n\r\n结构化思维带来的编程写法也更有助于 **多人协作**。  \r\n多人协作的开发方式，提高了开发速度，但也增加了整个程序的不确定性和沟通成本。每个人的思维逻辑都不同，所以代码实现也五花八门，对接接口也千奇百怪。再好的开发规范，也只能约束代码的编写行为，却没办法规范统一人们的逻辑实现。不同的对接风格，增加了沟通成本，也无法保证确定性。  \r\n遵循结构化思维，能够将开发人员从以往的主观逻辑实现，拉回到客观的结构规则上来，消除主观差异性，回归到结构本质的输入和输出，令其自洽，易于大家共识。为字段赋值的写法，也简单直白的统一了对接风格，降低沟通成本。并且得益于安全特性，能够更好的消除多人协作带来的不确定性，以更低成本，保证整个程序的安全稳定。\r\n\r\n## 应用场景\r\n\r\n结构化编程的方式，除了常规的前端、后端，对于运维等也是大有裨益，就像写配置文件。  \r\n由于结构的自洽性，其相当于是物理概念的物质，所以理论上只要结构自身的规则准确，那么可以更容易的对任何场景进行模拟，比如对互相干涉性较强的星系模拟、气候模拟、神经模拟等也非常有潜力。\r\n\r\n## 总结\r\n\r\n如前所述，此文的意义在于，打破根深蒂固的陈旧过程式编程观念和思维，找到结构化编程的新观念、新思维，站在更好的视角，拥有更广阔的视野，重塑对程序的认知，建立新的意识形态，发挥优势，**提高生产力**。\r\n\r\n## 现在，让我们的思维解放吧！","content_rendered":"<p>为什么说写代码如盗墓笔记呢，是因为写代码确实有一些特点和盗墓笔记很像，比如坑比较多，也都处于暗处，没有在明面上，在进入之前是无法知晓整个结构的，只有亲身深入其中，详细探索完每一个地方之后才能知晓。</p>\n<p>但是这个探索过程是非常艰难的，因为一切都是未知的，也没有任何导航可用，只能两眼抹黑的往前瞎拱，自然免不了各种迷路，各种碰壁，各种掉坑。</p>\n<p>这种艰难的状况经历了多了之后，我们就应该思考了，是什么原因导致了这种状况？那么又有没有方法可以解决这种状况吗？</p>\n<h2>分析代码的特点</h2>\n<p>我们重新审视分析下程序代码的特点，只有了解了这些特点，才能探究出原因。<br/>\n程序代码主要是由数据变量和逻辑控制流构成的，其中逻辑控制流占据了绝大部分。而逻辑控制流包含了许多分支，就像本来是一条道路，却分叉出了许多支路，选择一条支路，走着走着又继续分叉出更多的支路出来，密密麻麻，乱乱糟糟的，这就导致了这些道路非常难走。并且更令人抓狂的是，这些道路没有导航，没有地图，没有路标，非得抹黑走到路的尽头才能知道尽头到底是什么。<br/>\n数据变量基本上有两个职能，一个是用来标记逻辑控制流的运行状态；另一个就是用来组成数据结构。而实际上离散的数据变量也算是数据结构的一种，只是不同于经典数据结构，不太明显而已，容易让人误认为其仅是一个离散的变量，而忽略其影响并左右逻辑控制流的结构性的意义。  </p>\n<p>所以整体看来就是，<strong>数据变量和逻辑控制流是互相关联互相影响的。</strong> </p>\n<p>而从分析过程中也可以知道，程序代码的特点就是分支散碎，藏于尽头，难以获知。导致这一特点的原因也是逻辑控制流的复杂性、散碎、藏于尽头。也即，程序代码的这些不好的特点都是由逻辑控制流体现的。</p>\n<p>那么逻辑控制流能避免这些缺点吗？答案是不能。因为这是由于逻辑控制流的根本复杂性和本质复杂性所决定的。逻辑控制流说白了就是平常说的过程，所以也是无法跳过的，因为你不能跳过过程而直接获得结果。<br/>\n所以从这里看来，程序代码的这些缺点也依然存在，无法避免。</p>\n<h2>什么是数据流向？</h2>\n<p>不过有一点非常值得思考，逻辑控制流的目的是什么？<strong>是进行数据转换，也就是进行数据结构的转换，也就是描述并控制数据的流向。</strong><br/>\n这也是程序的本质：<strong>从输入数据结构，来获取输出数据结构。</strong><br/>\n所以，写逻辑控制流的意义不是纯粹为了写逻辑控制流，而是为了进行数据结构的转换，描述并控制数据的流向。因此，我们可以获得一个非常重要的有用信息，<strong>只要能够理清数据的流向，就能显著降低阅读代码的难度。</strong>\n我们阅读代码的目的其实也就是为了弄清楚数据的流向。</p>\n<p>那么我们就把重心转移到理清数据的流向上来，分析下如何才能更好的理清数据的流向。<br/>\n因为逻辑控制流的本质复杂性，所以我们无法通过逻辑控制流来清晰的理清数据的流向，这也正是我们一直以来读写代码所采用的方式，事实证明，这不是好的方式，数据流向散落在逻辑控制流的各个地方，根本没有好的办法可以串联起来，形成一个有导航意义的地图。  </p>\n<p>前文说过，程序代码是由数据变量和逻辑控制流构成的，也提到过，数据变量和逻辑控制流是互相关联互相影响的，并且数据流向自然也离不开数据变量。既然没有好的办法通过逻辑控制流来理清数据流向，那么就需要思考下在数据变量上是否有好的办法。</p>\n<p>数据变量是什么？前文解释过，数据变量就是数据结构。<br/>\n请着重注意 <strong>结构</strong> 这个概念，结构表示了层级和关联，而<strong>关联就是流向</strong>，我们正是想理清流向。所以在数据结构身上，我们看到了理清数据流向的希望。</p>\n<p>在开始分析如何通过数据结构来理清数据流向之前，我觉得有必要，也非常有必要重新强化对结构的认知。因为有太多的小伙伴们对结构没有足够的重视，不以为然，莫不关心，没有认知到结构的重要性以及不可或缺性以及根本本质性。</p>\n<h2>结构是“神”的语言</h2>\n<p>我们眼前的一切，周围的一切，手机、电脑、衣食住行、山川大海、以及你我，都是由结构构成的，更确切的讲，这一切就是结构。我们第一次认知这个世界就是从结构开始，第一次睁眼看到父母，第一次拆解玩具，第一次感受花草。人类学习结构，利用结构，组成各种各样的新的结构、新的工具来帮助我们生活。人类研究周围的各种物体，以及日月星辰、宇宙天体，其实就是在探索它们的结构，和结构之间的关联。只有知晓了它们的结构与之间的关联，我们才能组装更高级的结构来生产工具，才能进一步知晓周围万物的原理和世界的运行规律。  </p>\n<p>我们都知道我们身处的宏观世界是三维的立体世界，这个世界中的任何物体都有其形状，有其结构，形状就是结构，没有结构将无法存在于这个世界中。即使加入看不见摸不着的时间维度组成四维的时空世界，结构依然存在于任何一个维度之中。我们都知道万有引力，其中引力并不是虚无飘渺的能量，而是质量在时空中引起的时空扭曲，正是因为时空可以被扭曲，所以任何一个维度都是有结构的，人类一直在探索其中的结构和关联。  </p>\n<p>在微观世界中，物质是由分子构成的，人类对分子的结构进行探索发现了原子，对原子的结构进行探索发现了原子核，继续不断对结构进行探索发现了夸克。反过来讲就是，各种更小的粒子结构通过 <strong>关联</strong> 组合成较大的粒子结构，层层组合最终构成了宏观世界。化学的本质是物理的粒子运动，粒子运动其实是结构之间的关联，人类的情感、想法等都是细胞间的化学信号，而化学信号又是物理的粒子运动，本质又是结构之间的关联，所以我们人类的一切行为，生物的一切行为都是结构之间的关联。  </p>\n<p>所以，结构是“神”的语言，用结构和结构之间的关联来描述整个世界。</p>\n<h2>分析如何理清数据流向</h2>\n<p>数据结构之于程序代码也同样如此，其是程序的根本，数据结构与之间的关联描述了整个程序世界，逻辑控制流依存于数据结构，若离开其，则程序将崩塌不复存在。</p>\n<p>现在我们开始分析如何通过数据结构来理清数据流向。<br/>\n由前文可知，数据的流向是由逻辑控制流来控制的，但是逻辑控制流本身就是复杂的，现在我们换个说法，数据的流向是由逻辑控制流来<strong>驱动</strong>的，逻辑控制流只是通过一些条件、规则来驱动数据进行流动，其流向并不是在写逻辑控制流的过程中而突然打通的，而是在写逻辑控制流之前，在数据结构定义的时候，就已经开始设计构思其流向了。只是几乎我们每一个程序员都忽略了这一点，我们错误的以为数据流向是存在于逻辑控制流之中的。</p>\n<h3>这种误解是如何产生的？</h3>\n<p>首先，程序的原作者在定义数据变量也即数据结构的时候，就已经在脑中设计构思其流向了，但他并没有在该数据结构上做说明来描述数据的流向。然后，他认为数据的流向应该用逻辑控制流来描述就可以，就够用了，所以就零零散散的用代码在逻辑控制流中进行描述。这就导致了别人不得不完整阅读逻辑控制流中的散碎的、反人类的代码来弄清楚数据的流向，原作者留给后来人的仅有这一堆蜿蜒曲折，支离破碎的代码，而清晰的导航地图只留在了原作者的脑海中，别人无法获取。只有神和原作者知道。时间久一点后，就只有神知道了。</p>\n<h3>强化数据结构的表达</h3>\n<p>阅读到此，我们已经非常确定数据的流向是隐含于数据结构之上的，只是数据结构太沉默，缺乏表达。而逻辑控制流又太活跃，喧宾夺主。</p>\n<p>所以，我们要强化数据结构的表达，在数据结构上描述数据的流向，也就是结构之间的关联。  </p>\n<p>事实上，当我们把几个独立的数据结构，编排组织在一起成为一个较大的新的结构时，这种关联就已经建立了，只是我们并未对其进行更多的、更详细的描述，关联隐晦其中。我们只是把它当作了数据的存储，然后通过逻辑控制流再对其进行读读写写。</p>\n<h2>寻找解决方案</h2>\n<p>有两种方案可以更好的描述结构之间的关联。</p>\n<h3>注释型方案</h3>\n<p>一种是注释型方案，在数据结构上通过注解来解释并描述结构之间数据的流动，可以描述流动的方向性，然后通过预处理，静态编译来校验结构之间关联的正确性。我们需要实现一个静态的编译检查工具。  </p>\n<p>依然还是在逻辑控制流中对数据的流向进行控制，只是额外增加了在数据结构定义时的说明，弊端是程序员可以偷懒不进行注解，这样就又退化回了原始的蛮荒。更主要的弊端是，还是采取了以逻辑控制流为主的编码方式，也就保留了前文说过的逻辑控制流的所有缺点，虽然通过注解有了数据流向的地图，但是辅助作用有限，阅读并梳理代码还是有较大难度，治标不治本。</p>\n<h3>数据结构化编程</h3>\n<p>另一种方案是，<strong>以数据结构为主，以逻辑控制流为辅，也就是面向数据结构编程（数据结构化编程），而非面向过程。</strong> </p>\n<p>注意，这不是为了提出新概念，也不是为了喊口号，而是为了改变以往的过程式思维方式，转到结构化思维方式上来。<strong>意识形态决定思维方式，思维方式决定实际行为。</strong></p>\n<p>这就是为何一直要强调结构的重要性来建立意识形态，从而塑造结构化思维，从而决定实际的代码编写。这个初始的思维转变可能不太习惯，请耐心些，因为我们已经越过了逻辑控制流的层层迷雾，开始直接面对程序的核心“数据结构”，握住了程序的命脉。</p>\n<h2>结构化思维 &amp; 结构的规则</h2>\n<h3>改变根深蒂固的看法</h3>\n<p><strong>在结构化思维方式中，我们首先要改变把数据结构仅仅当作数据存储这一根深蒂固的看法。</strong></p>\n<p>或许你会认为这违背了以往的准则，离经叛道，数据结构就应该也仅应该当作逻辑控制的存储区域，这样才有简单性。貌似没错，但实际上整个程序代码变简单了吗？用事实说话就是并没有！唯一保持“简单”的只有数据结构，能不简单吗，就是声明定义了一个变量而已，当然简单了。但为此付出的代价是无比高昂的，仅为了保持变量声明的简单性，而不得不在逻辑控制流中来控制其流向，操纵其行为，通过各种令人绝望的骚操作来让其运动起来，引发绝望的复杂性。  </p>\n<p>这就好比，太阳和地球纯粹就是简单的球体而已，是固定静止的，没有地球绕着太阳旋转，而如果要让地球绕着太阳旋转的话，则只能由上帝额外施加一个 <strong>神力</strong> 来让地球绕着太阳旋转。如果我们的宇宙真是这样的话，我们永远无法弄清楚宇宙天体的运行规律，绝不可能！这直接丢弃了万有引力，而是通过神力来模拟引力的效果，而神力却是我们永远无法触及的，除非我们是神。更恐怖的是，一旦引入这个神力，就会破坏原来世界的平衡（蝴蝶效应），而为了维持平衡，则会引入更多的神力，从而陷入无尽的循环。一个充满神力的世界，是极致复杂的，永远不可能弄清楚。  </p>\n<p>而我们却习惯于在程序代码中充当神的角色，用各种神力来实现目的，并艰难的维护着平衡，以至于自己也难以看懂。摘去神力的面具，这其实是幽灵之力，魔鬼之力，地狱之力，想当神的我们，却实际成为了撒旦。</p>\n<p>改变了看法之后，数据结构就不应该是一个静静的数据存储了，<strong>数据结构本身一定是有自己的规则。</strong>\n就像太阳和地球一样，其自身就具有引力的规则，可以自我解释清楚，而不是借助外部的神力。宇宙的规则“物理”的简单之处也就是所有的规则一定是存在于其物质本身的，通过对物质本身的结构和规则进行探索，就能掌握万物的奥秘。</p>\n<h3>改变主观视角</h3>\n<p>所以我们要在数据结构上定义规则，用其本身的规则来描述结构之间的关联。  </p>\n<p><strong>在结构化思维方式中，我们思考的角度应该立足于数据结构上。</strong>\n这就产生一个非常有意思的思考流程：</p>\n<ol>\n<li>首先告诫自己，这是一个从输入数据转化为输出数据的运动规则，一定抽象出两类字段，即输入字段和输出字段。</li>\n<li>分析需求，找出提供的物料和期望的结果，在结构上定义一个或多个输入字段，和一个或多个输出字段。</li>\n<li>因为要定义规则，规则的最大特点就是可以被动的自动执行（物理规则也是如此；其不同于函数，函数是主动执行的），所以要找到执行的时机。</li>\n<li>考虑到函数执行的时机是当所有入参都传入时，所以很自然的，规则的执行时机，应该是规则所依赖的输入字段都准备好时。</li>\n<li>这里获知一个很有趣的性质，就是规则的执行是不依赖入参的顺序的，也即无需操心字段的赋值顺序，程序员只需要负责把字段塞满就好，如果有规则该执行，那么就会自动执行。</li>\n<li>\n由此，定义规则就变得简单了，主要分为三部分：<ul>\n<li>所需要的条件（输入数据），即声明需要哪些输入字段</li>\n<li>规则细节（数据转化的过程），即实现数据转化的过程</li>\n<li>产生<strong>预期</strong>输出结果（输出数据），即标明会有哪些输出字段（暂时简化，写此文时，在评估确定较好的通用标明方案）</li>\n</ul>\n</li>\n<li>发现结构化的一个重要性质，即数据流向是清晰的，易于梳理的，这对可维护性很重要。（<strong>达到理清数据流向的目标</strong>）</li>\n<li>发现结构化的另一个重要性质，即数据结构的复用性很高，因为每个结构都是<strong>自洽</strong>的。</li>\n<li>对于复杂的需求，可以构建树形数据结构，由子结构的输出结果作为父结构所需要的条件，执行规则，产生属于父结构的输出结果。最终通过这种简单的方式，在最外层生成最终的<strong>预期</strong>输出结果，交付给用户。</li>\n<li>最终，重新认知到，程序是由简单易懂的数据结构遵循规则运行后，产生<strong>预期</strong>输出结果（输出字段），而不应该是进入黑盒函数后经过玄学操作返回结果。这是因为，前者的结果是可以预期的，规则是恒定的，可以扁平展开的；而后者的结果是难以预期的，也难以进入梳理运行流程，复杂令人绝望。</li>\n</ol>\n<h3>结构化的基本性质和特性</h3>\n<p>可以发现结构化的三大基本性质：<strong>易于读写、流向清晰、高度复用</strong>。<br/>\n和高级特性：<strong>安全、并发</strong>。字段会对数据进行完备校验（不仅校验类型，也校验数据值是否符合预期规则），每个字段都是安全的，那么整个程序就会是安全的。由于字段赋值是不要求顺序的，因而可以有更好的并发性。</p>\n<h3>定义结构 &amp; 定义规则</h3>\n<p>实际编程需要做的只有 2 、6 两步，这也正是结构化思维后数据结构的两个根本构成：<strong>字段和规则</strong>。在以往只有字段的情况下，新添加了规则这一个概念，整个程序世界变得完全不同了，开始变得清晰明朗了，一直萦绕的迷雾消失不见了，如透明般展示于我们的眼前。就像有了货币规则之后，人类的整个文明世界都变得不同了，社会飞速进步。</p>\n<p>显而易见的，在走完整个思考流程后，最终我们对程序有了简单易懂的全新认知，获益是巨大的。整个程序如树形结构一般清晰的展示于我们眼前，对于我们阅读来讲，基本上只需要关心字段的输入和输出，而不必探究详细的实现，因为字段是如此的清晰易读。每一个子结构都可以使用同样的方式，扁平展开，阅读复杂度是恒定平缓的，而这在过程式编程中是无法想象的，是不可能的，其复杂度如蜗牛一般是螺旋状的，总能把人搞晕，代码量越多，复杂度就越恐怖。而现在我们终于找到了结构化编程，将复杂度变得平缓，有一种打破枷锁的解放感。</p>\n<p>耳听为虚，眼见为实，接下来通过一个示例来体会下结构化编程的简单易懂。（此为演示代码，<strong>现在已经有 TypeScript 版可用: <a href=\"https://rainforesters.github.io/rainforest-js\" rel=\"nofollow\">https://rainforesters.github.io/rainforest-js</a></strong> ）</p>\n<pre><code class=\"language-go\">// 定义结构\n\n// 定义跳跃的信号结构\ntypedef JumpSignal {\n  jump bool\n  event Event\n  stage Stage\n}\n\n// 定义规则函数\n\n// 这个规则应该解读为：将用户的操作转化为跳跃信号\nfuncdef JumpSignal (\n  // 声明待观察的字段（可以有多个）\n  // 一旦所有字段都准备好（被赋值），则触发规则函数\n  event\n) =&gt; {\n  if (self.event.type == \"tap\") {\n    self.jump = true // 为 jump 字段赋值，表示 jump 字段已经准备好\n  }\n}\n\nfuncdef JumpSignal (\n  stage\n) =&gt; {\n  self.stage.addEventListener(\"tap\", (e) =&gt; {\n    self.event = e\n  })\n}\n\n\ntypedef Avatar {\n  ...\n}\n\ntypedef Player {\n  avatar Avatar\n  jumpSignal JumpSignal\n}\n\n// 这个规则应该解读为：当跳跃信号发生时，将角色变成跳跃状态\nfuncdef Player (\n  jumpSignal {\n    // 可以直接观察子结构的字段，而无需关心 jumpSignal 是否为空，\n    // 因为，遵循结构化编程的思维，这里只需要声明待观察的目标字段，\n    // 也就是，我们只期望 jump 准备好，\n    // 这也就间接表明了 jumpSignal 肯定会准备好。\n    // 这种简单直白的条件声明，是以往过程式编程所无法实现的。\n    jump\n  }\n) =&gt; {\n  if (self.jumpSignal.jump) {\n    self.avatar.state = \"jump\"\n  }\n}\n\n\nfunc main() {\n  // 初始化结构实例\n  // avatar jumpSignal 会自动初始化\n  const player = typeinit(Player)\n  player.jumpSignal.stage = stage // 将舞台赋值给跳跃信号\n}\n</code></pre>\n<p><strong>核心是以数据结构为主，在其上定义规则，充分利用规则的被动自动执行。</strong><br/>\n整个程序的结构现在是完全可视的了，子结构都层次分明，职责明确，可以快速的弄懂结构的意图，梳理整个程序的架构，理清数据的流向。我们能避免像以往过程式编程那样掉入逻辑漩涡，无法自拔，可以松快的读写代码。</p>\n<h3>结构化编程的新写法</h3>\n<p>以往的过程式编程的写法是，需要通过逻辑控制流，一步一步小心翼翼的线性编写，同时还要考虑最令人烦恼的分支判断等，需要费很大的力气来编写。  </p>\n<p>现在，编程方式开始有变化了，通过结构化编程，我们获得了三个恒定的写法：</p>\n<ul>\n<li><strong>定义数据结构</strong></li>\n<li><strong>定义规则</strong></li>\n<li><strong>为字段赋值（让数据准备好）</strong></li>\n</ul>\n<p>得益于结构的高复用性，所以，最常用的写法就是为字段赋值，这个活很好干。不用引入逻辑控制流，不用操心赋值顺序，只要需要被赋值，那就赋值好了，只要需要准备的都准备好了，系统会聪明的遵循规则自动运行。这就像是在设置配置文件，简单直白，通俗易懂。</p>\n<h2>一定要有新认知、新思维</h2>\n<p>可能依然有些同学会觉得上述示例晦涩难懂，发现不了结构化编程的好处，说白了就是一时还没有转过弯来，依然用过程式的思维来阅读上述代码，旧思维太固执，太根深蒂固。  </p>\n<p>正如前面花大力气强调的，<strong>一定要认知到结构的重要性，一定要改变数据结构是数据存储的固执看法，一定要秉承结构化的思维，以数据结构为主，着眼于结构本身去理解规则。</strong>\n意识形态决定思维方式，思维方式决定实际的阅读和编写行为。  </p>\n<p>总之，要扭转过程式思维到结构化思维上来，想通了，就明朗了。</p>\n<h2>结构化编程的好处</h2>\n<p>使用结构化编程，我们能获得一些前所未有的令人欣喜的好处，如我们可以直接从结构化的三大基本性质（易于读写、流向清晰、高度复用）中获益，也可以从更高级的安全和并发特性中获益。还有就是得益于结构化编程的新写法，我们可以实现更多工具在静态检查阶段或运行阶段，通过可视化的方案来一览整个程序的数据流向，可以知道哪些字段是输入数据；哪些字段是输出数据；哪些字段是被依赖的，又间接依赖哪些字段；哪些字段已经准备好；哪些字段尚未准备好，等等等等。\n这在以往的过程式编程中是难以实现的。</p>\n<p>还有一个不得不说的性质：<strong>高度复用</strong>。<br/>\n同样得益于结构化编程的新写法，我们统一了结构引用定义的方式，和为字段赋值的方式。<br/>\n这就表示，你自己定义的或者他人定义的结构，都能够复用、通用。这也表示了，如果大家开放自己定义的结构给所有人使用，那么随着积累、沉淀，我们写的代码将会越来越少。<br/>\n以往，我们受限于组件的不可检索性，只能通过一个项目的文字简介来获知是否对自己适用，而现在得益于结构的完整自描述性（自洽），可以归纳出输入字段的类型和输出字段的类型，构建索引，从而可以提供终端的用户检索。<br/>\n同时，由于数据结构代表数据本身，可以方便进行序列化，这就表示，可以抹平不同编程语言之间的差异，可以方便的跨语言执行规则，也易于分布式执行规则。</p>\n<p>另一个不得不说的特性：<strong>安全</strong>。<br/>\n毫不客气的讲，绝大多数程序员最容易忽视的就是安全，除了讨厌写注释之外，就是讨厌写安全校验，不喜欢穿衣服就出门。还有一个长久困扰程序员的麻烦是 Debug，除去明显的逻辑错误，大多数 Debug 的过程其实是把异常数据校正的过程，但是追踪问题根源却要耗费九牛二虎之力。<br/>\n现在，受益于结构的自洽，我们也可以让类型自洽，对类型进行自我描述，不但要校验输入数据的类型，同时也校验数据的值是否合规，是否符合预期。也即类型是可以有明确语义的，可信的，可以预期的，是安全的。<br/>\n比如期望是偶数，那么就定义一个偶数类型，然后作为数据结构的字段类型，那么对任何偶数类型字段的赋值都会自动进行校验，校验的目的就是要确保符合预期，保持确定性。<br/>\n每个字段都是符合预期的，那么整个结构就是符合预期的，从而整个程序也是符合预期的，是安全的。整个程序的状态在任何时刻都是确定的，任何时刻都是安全的。</p>\n<p>清晰的数据流向也提高了 <strong>可维护性</strong>。<br/>\n现在，整个程序的流向地图不是隐藏于原作者的脑海了，在编写程序的时候就已经开始绘制出来了，这对于后续的维护者来说是天大的福音。<br/>\n同时，得益于上面所说的安全，让结构保持在确定的、可以预期的状态，这也能减少 Bug 的产生，降低 Debug 的难度。</p>\n<p>结构化思维带来的编程写法也更有助于 <strong>多人协作</strong>。<br/>\n多人协作的开发方式，提高了开发速度，但也增加了整个程序的不确定性和沟通成本。每个人的思维逻辑都不同，所以代码实现也五花八门，对接接口也千奇百怪。再好的开发规范，也只能约束代码的编写行为，却没办法规范统一人们的逻辑实现。不同的对接风格，增加了沟通成本，也无法保证确定性。<br/>\n遵循结构化思维，能够将开发人员从以往的主观逻辑实现，拉回到客观的结构规则上来，消除主观差异性，回归到结构本质的输入和输出，令其自洽，易于大家共识。为字段赋值的写法，也简单直白的统一了对接风格，降低沟通成本。并且得益于安全特性，能够更好的消除多人协作带来的不确定性，以更低成本，保证整个程序的安全稳定。</p>\n<h2>应用场景</h2>\n<p>结构化编程的方式，除了常规的前端、后端，对于运维等也是大有裨益，就像写配置文件。<br/>\n由于结构的自洽性，其相当于是物理概念的物质，所以理论上只要结构自身的规则准确，那么可以更容易的对任何场景进行模拟，比如对互相干涉性较强的星系模拟、气候模拟、神经模拟等也非常有潜力。</p>\n<h2>总结</h2>\n<p>如前所述，此文的意义在于，打破根深蒂固的陈旧过程式编程观念和思维，找到结构化编程的新观念、新思维，站在更好的视角，拥有更广阔的视野，重塑对程序的认知，建立新的意识形态，发挥优势，<strong>提高生产力</strong>。</p>\n<h2>现在，让我们的思维解放吧！</h2>\n","last_modified":1612488066,"replies":21,"id":751452},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":168272,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680","stars":3156,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"lijiasheng1984","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/29926edb84a274e6e654f7c7219bffd5?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/lijiasheng1984","tagline":null,"twitter":null,"created":1511665131,"avatar_large":"https://cdn.v2ex.com/gravatar/29926edb84a274e6e654f7c7219bffd5?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/29926edb84a274e6e654f7c7219bffd5?s=24&d=retro","location":null,"btc":null,"id":270236},"last_reply_by":"lmoon","last_touched":1612493694,"title":"不喜欢 Notepad++的态度，求 Win 下替代软件？","url":"https://www.v2ex.com/t/751483","created":1612492536,"content":"看了 Notepad++软件主页，感觉有点过分了，打算换个，有推荐的吗？","content_rendered":"看了 Notepad++软件主页，感觉有点过分了，打算换个，有推荐的吗？","last_modified":1612492536,"replies":20,"id":751483},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1607656854","name":"macos","avatar_normal":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1607656854","title":"macOS","url":"https://www.v2ex.com/go/macos","topics":16159,"footer":"<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。","header":"The world’s most advanced desktop operating system.","title_alternative":"macOS","avatar_mini":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1607656854","stars":4213,"aliases":[],"root":false,"id":22,"parent_node_name":"os"},"member":{"username":"sheatming","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/4673/f2c3/529355_mini.png?m=1611801098","bio":null,"url":"https://www.v2ex.com/u/sheatming","tagline":null,"twitter":null,"created":1611041922,"avatar_large":"https://cdn.v2ex.com/avatar/4673/f2c3/529355_mini.png?m=1611801098","avatar_mini":"https://cdn.v2ex.com/avatar/4673/f2c3/529355_mini.png?m=1611801098","location":null,"btc":null,"id":529355},"last_reply_by":"zhaokun","last_touched":1612491912,"title":"mbp 开机蓝牙的坑","url":"https://www.v2ex.com/t/751447","created":1612486971,"content":"MBP18\r\n\r\n症状：开机后不能使用蓝牙键盘鼠标（罗技）的。同盘下 win10 开机可用。\r\n判断：应该是跟系统有关。\r\n理由：\r\n几个月前因一次误操作导致环境出问题，就打算清盘重装（ 10.15.6 ）。\r\n重装后的一天偶然发现键盘和鼠标都能用了！大喜！ 舒服了一段时间。\r\n前两天手贱重启了一下（上班开机下班关机，从没重启过）。结果被自动更新抓住了，强制升级到 10.15.7 。然后发现又不能用了。","content_rendered":"MBP18<br /><br />症状：开机后不能使用蓝牙键盘鼠标（罗技）的。同盘下 win10 开机可用。<br />判断：应该是跟系统有关。<br />理由：<br />几个月前因一次误操作导致环境出问题，就打算清盘重装（ 10.15.6 ）。<br />重装后的一天偶然发现键盘和鼠标都能用了！大喜！ 舒服了一段时间。<br />前两天手贱重启了一下（上班开机下班关机，从没重启过）。结果被自动更新抓住了，强制升级到 10.15.7 。然后发现又不能用了。","last_modified":1612486993,"replies":17,"id":751447},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":168272,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680","stars":3156,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"sugars","website":"","github":"suguoyao","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/7383/0ff5/381975_mini.png?m=1604392106","bio":"","url":"https://www.v2ex.com/u/sugars","tagline":"","twitter":"","created":1549176596,"avatar_large":"https://cdn.v2ex.com/avatar/7383/0ff5/381975_mini.png?m=1604392106","avatar_mini":"https://cdn.v2ex.com/avatar/7383/0ff5/381975_mini.png?m=1604392106","location":"","btc":"","id":381975},"last_reply_by":"tremblingblue","last_touched":1612493120,"title":"作为老粉，大家一起来对 [海贼王] 的剧情分析讨论","url":"https://www.v2ex.com/t/751453","created":1612488099,"content":"最近，音乐人赵英俊不幸病逝，看到他遗言中提到的一点，未能看到海贼王结局而感到遗憾，这让人实在泪目，R.I.P，愿他在另一个世界能看到精彩的结局吧！\r\n\r\n据尾田之前的采访，貌似透露了计划在 5-10 年内完结海贼王，而最新一期漫画中，剧情已经发展到了路飞、索隆与超新星罗、基德等人和超强的四皇凯多、大妈在和之国正式交战，看得让人热血沸腾！但是显然在四皇超强实力面前，几个人显得还有些稚嫩，想真正打倒四皇，我个人认为后面有几个关键的武器哈：1.草帽小弟团们的支援； 2.路飞觉醒？（配合刚学会的流樱）...\r\n\r\n未来还有好多好多剧情线，如传闻萨博之死、革命军、黑胡子红发、天龙人、路飞和赤犬之战？，想想就激动期待。大家对未来剧情有什么个人的看法和见解？在这里理性友好的讨论一下哈（其实是想摸鱼...doge ）","content_rendered":"最近，音乐人赵英俊不幸病逝，看到他遗言中提到的一点，未能看到海贼王结局而感到遗憾，这让人实在泪目，R.I.P，愿他在另一个世界能看到精彩的结局吧！<br /><br />据尾田之前的采访，貌似透露了计划在 5-10 年内完结海贼王，而最新一期漫画中，剧情已经发展到了路飞、索隆与超新星罗、基德等人和超强的四皇凯多、大妈在和之国正式交战，看得让人热血沸腾！但是显然在四皇超强实力面前，几个人显得还有些稚嫩，想真正打倒四皇，我个人认为后面有几个关键的武器哈：1.草帽小弟团们的支援； 2.路飞觉醒？（配合刚学会的流樱）...<br /><br />未来还有好多好多剧情线，如传闻萨博之死、革命军、黑胡子红发、天龙人、路飞和赤犬之战？，想想就激动期待。大家对未来剧情有什么个人的看法和见解？在这里理性友好的讨论一下哈（其实是想摸鱼...doge ）","last_modified":1612488099,"replies":15,"id":751453},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_large.png?m=1611468499","name":"apple","avatar_normal":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_normal.png?m=1611468499","title":"Apple","url":"https://www.v2ex.com/go/apple","topics":13906,"footer":"","header":"设计了 <a href=\"/go/watch\">Apple Watch</a>，<a href=\"/go/ipad\">iPad</a>，<a href=\"/go/iphone\">iPhone</a>，<a href=\"/go/imac\">iMac</a> 及 <a href=\"/go/mbp\">MacBook Pro</a> 等电子产品的美国公司。","title_alternative":"Apple","avatar_mini":"https://cdn.v2ex.com/navatar/6cdd/60ea/184_mini.png?m=1611468499","stars":1705,"aliases":[],"root":false,"id":184,"parent_node_name":"hardware"},"member":{"username":"YoungKing6","website":"","github":"","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/87ed/7214/495591_mini.png?m=1607773757","bio":"","url":"https://www.v2ex.com/u/YoungKing6","tagline":"More than","twitter":"","created":1592622490,"avatar_large":"https://cdn.v2ex.com/avatar/87ed/7214/495591_mini.png?m=1607773757","avatar_mini":"https://cdn.v2ex.com/avatar/87ed/7214/495591_mini.png?m=1607773757","location":"","btc":"","id":495591},"last_reply_by":"otakustay","last_touched":1612493678,"title":"带着 Apple Watch 搓麻将 卡路里消耗的也不断计算在内 看来麻将也算是运动了","url":"https://www.v2ex.com/t/751441","created":1612483679,"content":"","content_rendered":"","last_modified":1612483679,"replies":14,"id":751441},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":168272,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680","stars":3156,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"ahelloworld","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/909efa51157349515c20fc83cff8b07f?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/ahelloworld","tagline":null,"twitter":null,"created":1511853065,"avatar_large":"https://cdn.v2ex.com/gravatar/909efa51157349515c20fc83cff8b07f?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/909efa51157349515c20fc83cff8b07f?s=24&d=retro","location":null,"btc":null,"id":270780},"last_reply_by":"capre","last_touched":1612493576,"title":"遇到这样的事情，我该如何与父母沟通？","url":"https://www.v2ex.com/t/751474","created":1612491649,"content":"和女朋友是 20 年 5 月份认识的，10 月同居，这不要过年了，我家里人催着让我带回家，但是一年都没到，我还不想带回家，该怎么和父母沟通？","content_rendered":"<p>和女朋友是 20 年 5 月份认识的，10 月同居，这不要过年了，我家里人催着让我带回家，但是一年都没到，我还不想带回家，该怎么和父母沟通？</p>\n","last_modified":1612491667,"replies":12,"id":751474},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6512/bd43/11_large.png?m=1604596625","name":"linux","avatar_normal":"https://cdn.v2ex.com/navatar/6512/bd43/11_normal.png?m=1604596625","title":"Linux","url":"https://www.v2ex.com/go/linux","topics":6006,"footer":"","header":"Linux is a Unix-like computer operating system assembled under the model of free and open source software development and distribution.","title_alternative":"Linux","avatar_mini":"https://cdn.v2ex.com/navatar/6512/bd43/11_mini.png?m=1604596625","stars":5427,"aliases":[],"root":false,"id":11,"parent_node_name":"os"},"member":{"username":"James369","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/James369","tagline":null,"twitter":null,"created":1602036009,"avatar_large":"https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/8b64ecd4b42da39f0025e467ce8497d6?s=24&d=retro","location":null,"btc":null,"id":511352},"last_reply_by":"alazysun","last_touched":1612492863,"title":"C++的缺省拷贝构造和浅拷贝有没有区别？","url":"https://www.v2ex.com/t/751449","created":1612487705,"content":"比如一个类：\r\n```\r\nclass Test {\r\npublic:\r\n    std::string s;    //s 在浅拷贝的时候，是否会调用 std::string 的拷贝构造？\r\n    float a;\r\n}\r\n\r\nstd::shared_ptr<Test> function() {\r\n    ...\r\n    auto test = Test();  //栈上创建\r\n    test.s = \"aaa\";    \r\n    test.a = 111;\r\n    auto result = std::make_shared<Test>(test);  //调用 Test 缺省构造函数，即 memcpy?\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    auto ret = function();\r\n    ...\r\n}\r\n\r\n```\r\n\r\n此时发生浅拷贝，如果直接 memcpy 覆盖过去，那么成员变量 s 指向的字符串的内容是栈上的，离开栈就会发生内存访问错误。但实际测试并没有发生内存错误。","content_rendered":"<p>比如一个类：</p>\n<pre><code>class Test {\npublic:\n    std::string s;    //s 在浅拷贝的时候，是否会调用 std::string 的拷贝构造？\n    float a;\n}\n\nstd::shared_ptr&lt;Test&gt; function() {\n    ...\n    auto test = Test();  //栈上创建\n    test.s = \"aaa\";    \n    test.a = 111;\n    auto result = std::make_shared&lt;Test&gt;(test);  //调用 Test 缺省构造函数，即 memcpy?\n    return result;\n}\n\nint main() {\n    auto ret = function();\n    ...\n}\n\n</code></pre>\n<p>此时发生浅拷贝，如果直接 memcpy 覆盖过去，那么成员变量 s 指向的字符串的内容是栈上的，离开栈就会发生内存访问错误。但实际测试并没有发生内存错误。</p>\n","last_modified":1612487759,"replies":12,"id":751449},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/92cc/2275/92_large.png?m=1582875070","name":"chrome","avatar_normal":"https://cdn.v2ex.com/navatar/92cc/2275/92_normal.png?m=1582875070","title":"Chrome","url":"https://www.v2ex.com/go/chrome","topics":1511,"footer":"","header":"Google Chrome is a browser that combines a minimal design with sophisticated technology to make the web faster, safer, and easier.","title_alternative":"Chrome","avatar_mini":"https://cdn.v2ex.com/navatar/92cc/2275/92_mini.png?m=1582875070","stars":798,"aliases":[],"root":false,"id":92,"parent_node_name":"browsers"},"member":{"username":"dazkarieh","website":"","github":"","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/e88a/4e0b/374912_mini.png?m=1562511653","bio":"","url":"https://www.v2ex.com/u/dazkarieh","tagline":"","twitter":"","created":1546502669,"avatar_large":"https://cdn.v2ex.com/avatar/e88a/4e0b/374912_mini.png?m=1562511653","avatar_mini":"https://cdn.v2ex.com/avatar/e88a/4e0b/374912_mini.png?m=1562511653","location":"","btc":"","id":374912},"last_reply_by":"Wongbrah","last_touched":1612493269,"title":"The Great Suspender 因为恶意漏洞被 Chrome 商店下架了","url":"https://www.v2ex.com/t/751442","created":1612484360,"content":"美时间 2021 年 2 月 4 日下午，Google 将受欢迎的扩展程序 The Great Suspender 删除，并主动禁用该扩展程序，因为该扩展程序包含恶意软件(漏洞)。Great Suspender 是（曾经是）一款受欢迎的扩展程序，它会使您多余的标签页进入睡眠状态，有助于防止 Chrome 使用过多的 RAM 和其他资源。\r\n\r\n去年，正如 TheMageKing 深入解释的那样，The Great Suspender 的开发易手，随后被出售给了未知的第三方。\r\n\r\n随后，Great Suspender 在 7.1.8 版中添加了一个漏洞，可以在您不知情的情况下在您的计算机上运行几乎所有类型的代码。此漏洞导致将该扩展程序从 Microsoft Edge 的扩展程序市场中删除，但是据报道，The Great Suspender 被保留在 Chrome 网上应用店中，因为据报道后来的更新删除了该漏洞利用程序。\r\n\r\n最新的消息是，Google 已强制删除包含恶意软件的 The Great Suspender，并将其从 Chrome 网上应用店中删除。此外，以前在 Chrome 中安装了 The Great Suspender 的任何人都具有被 Chrome 强制禁用的扩展程序。\r\n\r\n不幸的是，对于那些热衷使用 The Great Suspender 的用户来说，强制禁用扩展名已导致其所有挂起的选项卡都被关闭（实际上丢失）。幸运的是，扩展程序的社区已经找到了一种找回丢失的标签的方法。\r\n\r\n只需打开 chrome：// history-您也可以通过在 Chrome 中按 Ctrl-H 来打开它，然后搜索 The Great Suspender 的扩展 ID：“ klbibkeccnjlkjkiokjodocebajanakg”。每个结果应该是您已暂停的标签，并且每个 URL 的末尾是您要查找的页面的 URL 。\r\n\r\n例如，一个挂起的标签可能具有如下网址：chrome-extension： //klbibkeccnjlkjkiokjodocebajanakg/suspended.html ＃ ttl\r\n= reddit ％ 3A ％ 20the ％ 20front ％ 20page ％ 20of ％ 20the ％ 20internet ＆ pos = 6807\r\n＆ uri = https： // www 。reddit 。com /\r\n\r\n最后，“ uri =”之后是缺少的挂起标签的 URL 。在这种情况下，可知你遗失的标签页是“ https： // www” 。reddit 。com /。“\r\n\r\n目前尚不清楚 TGS 是否会因此恶意软件问题被永久删除，一个好消息是，该社区分支了 The Great Suspender 的最后一个无恶意软件版本，创建了 The Marvelous Suspender，该产品现已在 Chrome Web Store 上提供。","content_rendered":"美时间 2021 年 2 月 4 日下午，Google 将受欢迎的扩展程序 The Great Suspender 删除，并主动禁用该扩展程序，因为该扩展程序包含恶意软件(漏洞)。Great Suspender 是（曾经是）一款受欢迎的扩展程序，它会使您多余的标签页进入睡眠状态，有助于防止 Chrome 使用过多的 RAM 和其他资源。<br /><br />去年，正如 TheMageKing 深入解释的那样，The Great Suspender 的开发易手，随后被出售给了未知的第三方。<br /><br />随后，Great Suspender 在 7.1.8 版中添加了一个漏洞，可以在您不知情的情况下在您的计算机上运行几乎所有类型的代码。此漏洞导致将该扩展程序从 Microsoft Edge 的扩展程序市场中删除，但是据报道，The Great Suspender 被保留在 Chrome 网上应用店中，因为据报道后来的更新删除了该漏洞利用程序。<br /><br />最新的消息是，Google 已强制删除包含恶意软件的 The Great Suspender，并将其从 Chrome 网上应用店中删除。此外，以前在 Chrome 中安装了 The Great Suspender 的任何人都具有被 Chrome 强制禁用的扩展程序。<br /><br />不幸的是，对于那些热衷使用 The Great Suspender 的用户来说，强制禁用扩展名已导致其所有挂起的选项卡都被关闭（实际上丢失）。幸运的是，扩展程序的社区已经找到了一种找回丢失的标签的方法。<br /><br />只需打开 chrome：// history-您也可以通过在 Chrome 中按 Ctrl-H 来打开它，然后搜索 The Great Suspender 的扩展 ID：“ klbibkeccnjlkjkiokjodocebajanakg”。每个结果应该是您已暂停的标签，并且每个 URL 的末尾是您要查找的页面的 URL 。<br /><br />例如，一个挂起的标签可能具有如下网址：chrome-extension： //klbibkeccnjlkjkiokjodocebajanakg/suspended.html ＃ ttl<br />= reddit ％ 3A ％ 20the ％ 20front ％ 20page ％ 20of ％ 20the ％ 20internet ＆ pos = 6807<br />＆ uri = https： // www 。reddit 。com /<br /><br />最后，“ uri =”之后是缺少的挂起标签的 URL 。在这种情况下，可知你遗失的标签页是“ https： // www” 。reddit 。com /。“<br /><br />目前尚不清楚 TGS 是否会因此恶意软件问题被永久删除，一个好消息是，该社区分支了 The Great Suspender 的最后一个无恶意软件版本，创建了 The Marvelous Suspender，该产品现已在 Chrome Web Store 上提供。","last_modified":1612484939,"replies":12,"id":751442},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_large.png?m=1607656854","name":"macos","avatar_normal":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_normal.png?m=1607656854","title":"macOS","url":"https://www.v2ex.com/go/macos","topics":16159,"footer":"<a href=\"/mbp\">MacBook Pro</a> 及 <a href=\"/go/imac\">iMac</a> 等 <a href=\"/go/apple\">Apple</a> 公司设计的计算机所运行的操作系统。<a href=\"/go/idev\">iOS</a> 的基础。","header":"The world’s most advanced desktop operating system.","title_alternative":"macOS","avatar_mini":"https://cdn.v2ex.com/navatar/b6d7/67d2/22_mini.png?m=1607656854","stars":4213,"aliases":[],"root":false,"id":22,"parent_node_name":"os"},"member":{"username":"inhd","website":"","github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/cb29/0687/481764_mini.png?m=1589798086","bio":"","url":"https://www.v2ex.com/u/inhd","tagline":"","twitter":null,"created":1586068678,"avatar_large":"https://cdn.v2ex.com/avatar/cb29/0687/481764_mini.png?m=1589798086","avatar_mini":"https://cdn.v2ex.com/avatar/cb29/0687/481764_mini.png?m=1589798086","location":"","btc":null,"id":481764},"last_reply_by":"gosansam","last_touched":1612491694,"title":"分享个配置好的 macOS 鼠须管 词库（含 12 个分类）","url":"https://www.v2ex.com/t/751439","created":1612483469,"content":"鉴于昨天又双叒叕看到多人反映输入法问题，劝大家能用自带输入法的就用自带的，不习惯的话再试试 Rime，当然如果试了 Rime，可以再试试我整理的这个词库🐶\r\n\r\n之前词库很零散，也看到有人分享但停留在 txt，故我按照搜狗官网 12 个分类，在每个类别里挑选下载量高且常用的进行转换配置，拿去直接用✍🏻️\r\n\r\n下载地址：[GitHub]( https://github.com/liuour/rime) （配置文件里 luna_pinyin.〔 1~12xxx 〕.dict.yaml ）\r\n\r\nps：微博上看到搜狗输入法 Android 版更新后不打开通讯录权限不给用了🙃🙃\r\n\r\n![e8q7ZsgxTFOjUK1]( https://i.loli.net/2021/02/05/e8q7ZsgxTFOjUK1.png)","content_rendered":"<p>鉴于昨天又双叒叕看到多人反映输入法问题，劝大家能用自带输入法的就用自带的，不习惯的话再试试 Rime，当然如果试了 Rime，可以再试试我整理的这个词库🐶</p>\n<p>之前词库很零散，也看到有人分享但停留在 txt，故我按照搜狗官网 12 个分类，在每个类别里挑选下载量高且常用的进行转换配置，拿去直接用✍🏻️</p>\n<p>下载地址：<a href=\"https://github.com/liuour/rime\" rel=\"nofollow\">GitHub</a> （配置文件里 luna_pinyin.〔 1~12xxx 〕.dict.yaml ）</p>\n<p>ps：微博上看到搜狗输入法 Android 版更新后不打开通讯录权限不给用了🙃🙃</p>\n<p><img alt=\"e8q7ZsgxTFOjUK1\" class=\"embedded_image\" loading=\"lazy\" referrerpolicy=\"no-referrer\" rel=\"noreferrer\" src=\"https://i.loli.net/2021/02/05/e8q7ZsgxTFOjUK1.png\"/></p>\n","last_modified":1612483469,"replies":12,"id":751439},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_large.png?m=1594743680","name":"qna","avatar_normal":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_normal.png?m=1594743680","title":"问与答","url":"https://www.v2ex.com/go/qna","topics":168272,"footer":"","header":"一个更好的世界需要你持续地提出好问题。","title_alternative":"Questions and Answers","avatar_mini":"https://cdn.v2ex.com/navatar/c20a/d4d7/12_mini.png?m=1594743680","stars":3156,"aliases":[],"root":false,"id":12,"parent_node_name":"v2ex"},"member":{"username":"tedd","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/d272/27ea/25657_mini.png?m=1345536551","bio":null,"url":"https://www.v2ex.com/u/tedd","tagline":null,"twitter":null,"created":1345536509,"avatar_large":"https://cdn.v2ex.com/avatar/d272/27ea/25657_mini.png?m=1345536551","avatar_mini":"https://cdn.v2ex.com/avatar/d272/27ea/25657_mini.png?m=1345536551","location":null,"btc":null,"id":25657},"last_reply_by":"sugars","last_touched":1612493689,"title":"如果只买入长期持有的话， BTC 和 ETH 你会选择？","url":"https://www.v2ex.com/t/751473","created":1612491479,"content":"我计划每个月抽几百块来定投，如果清零了就当每个多吃了几顿好的，要世界翻天覆地了那就换了养老。那么，问题来了，买 BTC 还是 ETH ？","content_rendered":"我计划每个月抽几百块来定投，如果清零了就当每个多吃了几顿好的，要世界翻天覆地了那就换了养老。那么，问题来了，买 BTC 还是 ETH ？","last_modified":1612491479,"replies":10,"id":751473},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6f49/22f4/18_large.png?m=1573619774","name":"shanghai","avatar_normal":"https://cdn.v2ex.com/navatar/6f49/22f4/18_normal.png?m=1573619774","title":"上海","url":"https://www.v2ex.com/go/shanghai","topics":2478,"footer":"","header":"","title_alternative":"Shanghai","avatar_mini":"https://cdn.v2ex.com/navatar/6f49/22f4/18_mini.png?m=1573619774","stars":1793,"aliases":[],"root":false,"id":18,"parent_node_name":"cn"},"member":{"username":"nznd","website":"","github":"","psn":"","avatar_normal":"https://cdn.v2ex.com/gravatar/5bdebe5b035331641989449c3b15a86d?s=24&d=retro","bio":"","url":"https://www.v2ex.com/u/nznd","tagline":"","twitter":"","created":1516622812,"avatar_large":"https://cdn.v2ex.com/gravatar/5bdebe5b035331641989449c3b15a86d?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/5bdebe5b035331641989449c3b15a86d?s=24&d=retro","location":"","btc":"","id":285490},"last_reply_by":"chitanda","last_touched":1612493604,"title":"过年回不了家干点啥好","url":"https://www.v2ex.com/t/751482","created":1612492458,"content":"迫于浦东昨天确诊一个，在浦东的我回家无望\r\n\r\n小地方，肯定加码，偏远边疆...\r\n\r\n（说不能加码其实已经减码过了，一周前打电话还是全上海回去就隔离，杨浦的同学今天刚解除 14 天...\r\n\r\n前天打电话给地方疫情指挥中心说只有黄埔和宝山要无条件 14 天的时候，还庆幸我在浦东，立即买票请假准备回家，没想到来的这么快\r\n\r\n早上刚打完电话给东航要求取消座位等进一步通知，正在取消单位请假...\r\n\r\n所以各位老哥，过年有啥有趣的事情干吗\r\n\r\n上海有啥适合过年去玩的吗...","content_rendered":"<p>迫于浦东昨天确诊一个，在浦东的我回家无望</p>\n<p>小地方，肯定加码，偏远边疆...</p>\n<p>（说不能加码其实已经减码过了，一周前打电话还是全上海回去就隔离，杨浦的同学今天刚解除 14 天...</p>\n<p>前天打电话给地方疫情指挥中心说只有黄埔和宝山要无条件 14 天的时候，还庆幸我在浦东，立即买票请假准备回家，没想到来的这么快</p>\n<p>早上刚打完电话给东航要求取消座位等进一步通知，正在取消单位请假...</p>\n<p>所以各位老哥，过年有啥有趣的事情干吗</p>\n<p>上海有啥适合过年去玩的吗...</p>\n","last_modified":1612492458,"replies":9,"id":751482},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_large.png?m=1612151314","name":"programmer","avatar_normal":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_normal.png?m=1612151314","title":"程序员","url":"https://www.v2ex.com/go/programmer","topics":43083,"footer":"","header":"While code monkeys are not eating bananas, they're coding.","title_alternative":"Programmer","avatar_mini":"https://cdn.v2ex.com/navatar/94f6/d7e0/300_mini.png?m=1612151314","stars":7233,"aliases":[],"root":false,"id":300,"parent_node_name":"computer"},"member":{"username":"Windsooon","website":"","github":"Windsooon","psn":"","avatar_normal":"https://cdn.v2ex.com/avatar/870f/1ee3/235833_mini.png?m=1502332729","bio":"","url":"https://www.v2ex.com/u/Windsooon","tagline":"","twitter":"","created":1497598553,"avatar_large":"https://cdn.v2ex.com/avatar/870f/1ee3/235833_mini.png?m=1502332729","avatar_mini":"https://cdn.v2ex.com/avatar/870f/1ee3/235833_mini.png?m=1502332729","location":"","btc":"","id":235833},"last_reply_by":"lewis89","last_touched":1612493680,"title":"技术面试的平等","url":"https://www.v2ex.com/t/751465","created":1612490419,"content":"我经常会看到程序员“面试造火箭，工作拧螺丝”的讨论，这篇文章我发布了我自己的一些看法：\r\n\r\n全文链接：[技术面试的平等]( https://zhuanlan.zhihu.com/p/109041525)\r\n\r\n> 但是如果你回顾那些因为错误代码造成灾难性后果的事件，从 Ariane 5 火箭因为整数溢出而爆炸到最近的波音飞机 737 Max 失事。你会发现灾难的来源都是微小的 bug，都是某一颗螺丝，而任何一颗螺丝没拧紧都会造成同样的后果。很多程序员往往只着眼于高大上的概念和架构，忽略了软件工程谨慎细微的重要性。而算法和数据结构却正式锻炼了这样谨慎的思维，Linus 在内核开发的邮件中曾经说过：\r\n\r\n> “说实话，我宁愿早点淘汰那些没有谨慎开发的人，这听起来很残酷。但我的原因不是因为 “欲戴皇冠，必承其重“这类的观点，而是有更深刻的意义。我宁愿不和粗心的人一起工作是因为谨慎对于软件开发是非常重要的“","content_rendered":"<p>我经常会看到程序员“面试造火箭，工作拧螺丝”的讨论，这篇文章我发布了我自己的一些看法：</p>\n<p>全文链接：<a href=\"https://zhuanlan.zhihu.com/p/109041525\" rel=\"nofollow\">技术面试的平等</a></p>\n<blockquote>\n<p>但是如果你回顾那些因为错误代码造成灾难性后果的事件，从 Ariane 5 火箭因为整数溢出而爆炸到最近的波音飞机 737 Max 失事。你会发现灾难的来源都是微小的 bug，都是某一颗螺丝，而任何一颗螺丝没拧紧都会造成同样的后果。很多程序员往往只着眼于高大上的概念和架构，忽略了软件工程谨慎细微的重要性。而算法和数据结构却正式锻炼了这样谨慎的思维，Linus 在内核开发的邮件中曾经说过：</p>\n</blockquote>\n<blockquote>\n<p>“说实话，我宁愿早点淘汰那些没有谨慎开发的人，这听起来很残酷。但我的原因不是因为 “欲戴皇冠，必承其重“这类的观点，而是有更深刻的意义。我宁愿不和粗心的人一起工作是因为谨慎对于软件开发是非常重要的“</p>\n</blockquote>\n","last_modified":1612490419,"replies":9,"id":751465},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/70ef/df2e/17_large.png?m=1596015931","name":"create","avatar_normal":"https://cdn.v2ex.com/navatar/70ef/df2e/17_normal.png?m=1596015931","title":"分享创造","url":"https://www.v2ex.com/go/create","topics":15676,"footer":"","header":"欢迎你在这里发布自己的最新作品！","title_alternative":"Create","avatar_mini":"https://cdn.v2ex.com/navatar/70ef/df2e/17_mini.png?m=1596015931","stars":3816,"aliases":[],"root":false,"id":17,"parent_node_name":"geek"},"member":{"username":"vinceall","website":"","github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/avatar/4df8/c51a/211992_mini.png?m=1612488943","bio":"","url":"https://www.v2ex.com/u/vinceall","tagline":"","twitter":null,"created":1485160449,"avatar_large":"https://cdn.v2ex.com/avatar/4df8/c51a/211992_mini.png?m=1612488943","avatar_mini":"https://cdn.v2ex.com/avatar/4df8/c51a/211992_mini.png?m=1612488943","location":"","btc":null,"id":211992},"last_reply_by":"ztyMCR","last_touched":1612493443,"title":"做英语公众号 2 年了","url":"https://www.v2ex.com/t/751458","created":1612489204,"content":"写推文一是兴趣，二是幻想哪天写不动代码了靠这个恰饭，然而做了快两年咯，粉丝少得可怜，恰饭真的好难。。。\r\n\r\n从最开始的鸡血，到涨粉难的忧桑，到现在的佛系，一个人一路走来，最难的时候可能就是日更了一百天，其实想想也没有那么难，细水长流，坚持就好，坚持一年算入门，坚持五年小有成就，坚持二十年就牛逼了\r\n\r\n最近开始读经济学人，边学习边发文，还挺喜欢这种状态，有兴趣的同学可以一看：\r\nhttps://mp.weixin.qq.com/s/hdV1DuidjnbJxqUPr7V-Qg\r\n连录音都是亲力亲为，虽然手机录音效果很渣\r\n\r\n写得很乱，感谢大家耐心看完。最后还是来一波硬广吧，欢迎关注我的公主号：英研社","content_rendered":"写推文一是兴趣，二是幻想哪天写不动代码了靠这个恰饭，然而做了快两年咯，粉丝少得可怜，恰饭真的好难。。。<br /><br />从最开始的鸡血，到涨粉难的忧桑，到现在的佛系，一个人一路走来，最难的时候可能就是日更了一百天，其实想想也没有那么难，细水长流，坚持就好，坚持一年算入门，坚持五年小有成就，坚持二十年就牛逼了<br /><br />最近开始读经济学人，边学习边发文，还挺喜欢这种状态，有兴趣的同学可以一看：<br /><a target=\"_blank\" href=\"https://mp.weixin.qq.com/s/hdV1DuidjnbJxqUPr7V-Qg\" rel=\"nofollow noopener\">https://mp.weixin.qq.com/s/hdV1DuidjnbJxqUPr7V-Qg</a><br />连录音都是亲力亲为，虽然手机录音效果很渣<br /><br />写得很乱，感谢大家耐心看完。最后还是来一波硬广吧，欢迎关注我的公主号：英研社","last_modified":1612489204,"replies":8,"id":751458},{"node":{"avatar_large":"https://cdn.v2ex.com/navatar/6512/bd43/11_large.png?m=1604596625","name":"linux","avatar_normal":"https://cdn.v2ex.com/navatar/6512/bd43/11_normal.png?m=1604596625","title":"Linux","url":"https://www.v2ex.com/go/linux","topics":6006,"footer":"","header":"Linux is a Unix-like computer operating system assembled under the model of free and open source software development and distribution.","title_alternative":"Linux","avatar_mini":"https://cdn.v2ex.com/navatar/6512/bd43/11_mini.png?m=1604596625","stars":5427,"aliases":[],"root":false,"id":11,"parent_node_name":"os"},"member":{"username":"tinydebian","website":null,"github":null,"psn":null,"avatar_normal":"https://cdn.v2ex.com/gravatar/90ab87aa0e6d980158b18c59ef43ffaf?s=24&d=retro","bio":null,"url":"https://www.v2ex.com/u/tinydebian","tagline":null,"twitter":null,"created":1548812812,"avatar_large":"https://cdn.v2ex.com/gravatar/90ab87aa0e6d980158b18c59ef43ffaf?s=24&d=retro","avatar_mini":"https://cdn.v2ex.com/gravatar/90ab87aa0e6d980158b18c59ef43ffaf?s=24&d=retro","location":null,"btc":null,"id":380958},"last_reply_by":"julyclyde","last_touched":1612493383,"title":"希望找人兼职在友善之臂的基于全志 H3 的 NanoPi Duo2 板子上，运行 kernel 4.19.x","url":"https://www.v2ex.com/t/751446","created":1612486792,"content":"大家好，\r\n\r\n友善之臂的 kernel，只支持到 kernel 4.14.x，链接是：\r\nhttp://wiki.friendlyarm.com/wiki/index.php/Building_U-boot_and_Linux_for_H5/H3/H2%2B/zh\r\n\r\n希望在友善之臂的基于全志 H3 的 NanoPi Duo2 板子上，运行 stable kernel 4.19.x 。\r\n\r\n如果双方合适，还希望麻烦做些其他 Linux kernel 的开发工作（关于将 tinyDebian 移植到其它板子和 USB 相关的）（最理想的候选人是他的时间相对自由，自由职业可能最理想。）\r\n\r\n有意者，请邮件联系： info@tinydebian.com","content_rendered":"大家好，<br /><br />友善之臂的 kernel，只支持到 kernel 4.14.x，链接是：<br /><a target=\"_blank\" href=\"http://wiki.friendlyarm.com/wiki/index.php/Building_U-boot_and_Linux_for_H5/H3/H2%2B/zh\" rel=\"nofollow noopener\">http://wiki.friendlyarm.com/wiki/index.php/Building_U-boot_and_Linux_for_H5/H3/H2%2B/zh</a><br /><br />希望在友善之臂的基于全志 H3 的 NanoPi Duo2 板子上，运行 stable kernel 4.19.x 。<br /><br />如果双方合适，还希望麻烦做些其他 Linux kernel 的开发工作（关于将 tinyDebian 移植到其它板子和 USB 相关的）（最理想的候选人是他的时间相对自由，自由职业可能最理想。）<br /><br />有意者，请邮件联系： info@tinydebian.com","last_modified":1612486792,"replies":7,"id":751446}]